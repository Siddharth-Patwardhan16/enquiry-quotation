generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Employee {
  id                String          @id @unique
  name              String
  email             String          @unique
  role              Role
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @updatedAt
  communications    Communication[]
  createdCompanies  Company[]       @relation("CompanyCreatedBy")
  createdCustomers  Customer[]      @relation("CustomerCreatedBy")
  enquiries         Enquiry[]
  createdQuotations Quotation[]     @relation("QuotationCreatedBy")
}

model Customer {
  id                        String          @id @default(uuid())
  name                      String          @unique
  isNew                     Boolean         @default(true)
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  designation               String?
  phoneNumber               String?
  emailId                   String?
  createdById               String?
  poRuptureDiscs            Boolean         @default(false)
  poThermowells             Boolean         @default(false)
  poHeatExchanger           Boolean         @default(false)
  poMiscellaneous           Boolean         @default(false)
  poWaterJetSteamJet        Boolean         @default(false)
  existingGraphiteSuppliers String?
  problemsFaced             String?
  communications            Communication[]
  contacts                  Contact[]
  createdBy                 Employee?       @relation("CustomerCreatedBy", fields: [createdById], references: [id])
  enquiries                 Enquiry[]
  locations                 Location[]
}

model Company {
  id                        String          @id @default(uuid())
  name                      String          @unique
  website                   String?
  industry                  String?
  createdAt                 DateTime        @default(now())
  updatedAt                 DateTime        @updatedAt
  createdById               String?
  poRuptureDiscs            Boolean         @default(false)
  poThermowells             Boolean         @default(false)
  poHeatExchanger           Boolean         @default(false)
  poMiscellaneous           Boolean         @default(false)
  poWaterJetSteamJet        Boolean         @default(false)
  existingGraphiteSuppliers String?
  problemsFaced             String?
  communications            Communication[]
  createdBy                 Employee?       @relation("CompanyCreatedBy", fields: [createdById], references: [id])
  contactPersons            ContactPerson[]
  enquiries                 Enquiry[]
  offices                   Office[]
  plants                    Plant[]
}

model Office {
  id              String          @id @default(uuid())
  name            String
  address         String?
  area            String?
  city            String?
  state           String?
  country         String?
  pincode         String?
  isHeadOffice    Boolean         @default(false)
  receptionNumber String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  companyId       String
  contactPersons  ContactPerson[]
  enquiries       Enquiry[]
  company         Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model Plant {
  id              String          @id @default(uuid())
  name            String
  address         String?
  area            String?
  city            String?
  state           String?
  country         String?
  pincode         String?
  plantType       String?
  receptionNumber String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  companyId       String
  contactPersons  ContactPerson[]
  enquiries       Enquiry[]
  company         Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
}

model ContactPerson {
  id             String          @id @default(uuid())
  name           String
  designation    String?
  phoneNumber    String?
  emailId        String?
  isPrimary      Boolean         @default(false)
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  officeId       String?
  plantId        String?
  companyId      String
  communications Communication[]
  company        Company         @relation(fields: [companyId], references: [id], onDelete: Cascade)
  office         Office?         @relation(fields: [officeId], references: [id], onDelete: Cascade)
  plant          Plant?          @relation(fields: [plantId], references: [id], onDelete: Cascade)
}

model Location {
  id              String       @id @default(uuid())
  name            String
  type            LocationType
  address         String?
  city            String?
  state           String?
  country         String?
  receptionNumber String?
  customerId      String
  contacts        Contact[]
  enquiries       Enquiry[]
  customer        Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@unique([customerId, name, type])
}

model Contact {
  id                 String          @id @default(uuid())
  name               String
  designation        String?
  officialCellNumber String?
  personalCellNumber String?
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  locationId         String
  customerId         String
  communications     Communication[]
  customer           Customer        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  location           Location        @relation(fields: [locationId], references: [id], onDelete: Cascade)
}

model Enquiry {
  id                Int           @id @default(autoincrement())
  subject           String
  description       String?
  requirements      String?
  timeline          String?
  enquiryDate       DateTime?
  priority          String?
  source            String?
  notes             String?
  status            EnquiryStatus @default(NEW)
  regretReason      String?
  quotationNumber   String?       @unique
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
  locationId        String?
  officeId          String?
  plantId           String?
  marketingPersonId String?
  customerId        String?
  companyId         String?
  documents         Document[]
  company           Company?      @relation(fields: [companyId], references: [id], onDelete: Cascade)
  customer          Customer?     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  location          Location?     @relation(fields: [locationId], references: [id], onDelete: Cascade)
  marketingPerson   Employee?     @relation(fields: [marketingPersonId], references: [id])
  office            Office?       @relation(fields: [officeId], references: [id], onDelete: Cascade)
  plant             Plant?        @relation(fields: [plantId], references: [id], onDelete: Cascade)
  quotations        Quotation[]
}

model Quotation {
  id                          String          @id @default(uuid())
  quotationNumber             String          @unique
  quotationDate               DateTime        @default(now())
  validityPeriod              DateTime?
  revisionNumber              Int             @default(0)
  totalBasicPrice             Decimal?
  gst                         Decimal?
  transportCosts              Decimal?
  insuranceCosts              Decimal?
  paymentTerms                String?
  deliverySchedule            String?
  specialInstructions         String?
  currency                    String          @default("INR")
  packingForwardingPercentage Decimal?        @default(3.0)
  incoterms                   String?
  subtotal                    Decimal?
  tax                         Decimal?
  totalValue                  Decimal?
  status                      QuotationStatus @default(LIVE)
  lostReason                  String?
  purchaseOrderNumber         String?
  poValue                     Decimal?
  createdAt                   DateTime        @default(now())
  updatedAt                   DateTime        @updatedAt
  createdById                 String?
  enquiryId                   Int
  documents                   Document[]
  createdBy                   Employee?       @relation("QuotationCreatedBy", fields: [createdById], references: [id])
  enquiry                     Enquiry         @relation(fields: [enquiryId], references: [id])
  items                       QuotationItem[]
}

model QuotationItem {
  id                  String    @id @default(uuid())
  materialDescription String
  specifications      String?
  quantity            Int
  pricePerUnit        Decimal
  total               Decimal?
  createdAt           DateTime  @default(now())
  quotationId         String
  quotation           Quotation @relation(fields: [quotationId], references: [id])
}

model Communication {
  id                    String              @id @default(uuid())
  subject               String
  description           String
  type                  CommunicationType
  status                CommunicationStatus @default(SCHEDULED)
  enquiryRelated        String?
  nextCommunicationDate DateTime?
  proposedNextAction    String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  customerId            String?
  contactId             String?
  employeeId            String?
  companyId             String?
  contactPersonId       String?
  company               Company?            @relation(fields: [companyId], references: [id], onDelete: Cascade)
  contact               Contact?            @relation(fields: [contactId], references: [id])
  contactPerson         ContactPerson?      @relation(fields: [contactPersonId], references: [id], onDelete: Cascade)
  customer              Customer?           @relation(fields: [customerId], references: [id])
  employee              Employee?           @relation(fields: [employeeId], references: [id])
}

model Document {
  id          String       @id @default(uuid())
  fileName    String
  fileUrl     String
  type        DocumentType
  createdAt   DateTime     @default(now())
  enquiryId   Int?
  quotationId String?
  enquiry     Enquiry?     @relation(fields: [enquiryId], references: [id])
  quotation   Quotation?   @relation(fields: [quotationId], references: [id])
}

enum Role {
  MARKETING
  MANAGER
  ADMINISTRATOR
}

enum LocationType {
  OFFICE
  PLANT
}

enum EnquiryStatus {
  NEW
  IN_PROGRESS
  QUOTED
  CLOSED
}

enum QuotationStatus {
  LIVE
  SUBMITTED
  WON
  LOST
  BUDGETARY
  DEAD
}

enum LostReason {
  PRICE
  DELIVERY_SCHEDULE
  LACK_OF_CONFIDENCE
  OTHER
}

enum CommunicationType {
  TELEPHONIC
  VIRTUAL_MEETING
  EMAIL
  PLANT_VISIT
  OFFICE_VISIT
}

enum CommunicationStatus {
  SCHEDULED
  COMPLETED
  CANCELLED
  RESCHEDULED
  FOLLOW_UP_REQUIRED
  WON
  LOST
}

enum DocumentType {
  CUSTOMER_REQUIREMENT
  TECHNICAL_DRAWING
  PURCHASE_ORDER
}
