generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// Simplified Employee model - this is your user
model Employee {
  id        String @id @unique // Directly maps to Supabase auth.users.id
  name      String
  email     String @unique
  role      Role
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  enquiries      Enquiry[]
  communications Communication[]
}

// Cleaned-up Customer model - no address fields
model Customer {
  id        String     @id @default(uuid())
  name      String     @unique
  isNew     Boolean    @default(true)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  // PO Information
  poRuptureDiscs     Boolean @default(false)
  poThermowells      Boolean @default(false)
  poHeatExchanger    Boolean @default(false)
  poMiscellaneous    Boolean @default(false)
  poWaterJetSteamJet Boolean @default(false)
  
  // Supplier Information
  existingGraphiteSuppliers String?
  problemsFaced             String?

  // A customer can have many locations and contacts
  locations Location[]
  contacts  Contact[]
  enquiries Enquiry[]
  communications Communication[]
}

// The central model for offices and plants
model Location {
  id        String       @id @default(uuid())
  name      String       // e.g., "Pune Plant", "Mumbai Head Office"
  type      LocationType // OFFICE or PLANT
  address   String?
  city      String?
  state     String?
  country   String?
  receptionNumber String?

  // Relation back to the parent Customer
  customerId String
  customer   Customer     @relation(fields: [customerId], references: [id], onDelete: Cascade)

  // A location has many contacts and enquiries
  contacts   Contact[]
  enquiries  Enquiry[]

  @@unique([customerId, name, type]) // Prevent duplicate names within same customer and type
}

// Contact is now linked to a specific Location
model Contact {
  id                 String   @id @default(uuid())
  name               String
  designation        String?
  officialCellNumber String?
  personalCellNumber String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // A contact belongs to one location and one parent customer
  locationId         String
  location           Location @relation(fields: [locationId], references: [id], onDelete: Cascade)
  customerId         String
  customer           Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  communications Communication[]
}

// Enquiry is now linked to a specific Location
model Enquiry {
  id                Int           @id @default(autoincrement())
  subject           String
  description       String?
  requirements      String?
  expectedBudget    String?
  timeline          String?
  enquiryDate       DateTime?
  priority          String?
  source            String?
  notes             String?
  status            EnquiryStatus @default(NEW)
  regretReason      String?
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt

  // An enquiry originates from one location
  locationId        String
  location          Location @relation(fields: [locationId], references: [id], onDelete: Cascade)

  // It is created by one employee
  marketingPersonId String
  marketingPerson   Employee @relation(fields: [marketingPersonId], references: [id])

  // Keep the customer relation for easier querying
  customerId        String
  customer          Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  documents         Document[]
  quotations        Quotation[]
}

model Quotation {
  id                  String          @id @default(uuid())
  quotationNumber     String          @unique
  quotationDate       DateTime        @default(now())
  validityPeriod      DateTime?
  revisionNumber      Int             @default(0)
  totalBasicPrice     Decimal?
  gst                 Decimal?
  transportCosts      Decimal?
  insuranceCosts      Decimal?
  paymentTerms        String?
  deliverySchedule    String?
  specialInstructions String?
  currency            String          @default("INR")
  subtotal            Decimal?
  tax                 Decimal?
  totalValue          Decimal?
  status              QuotationStatus @default(DRAFT)
  lostReason          String?
  purchaseOrderNumber String?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  enquiryId           Int
  documents           Document[]
  enquiry             Enquiry         @relation(fields: [enquiryId], references: [id])
  items               QuotationItem[]
}

model QuotationItem {
  id                  String    @id @default(uuid())
  materialDescription String
  specifications      String?
  quantity            Int
  pricePerUnit        Decimal
  total               Decimal?
  createdAt           DateTime  @default(now())
  quotationId         String
  quotation           Quotation @relation(fields: [quotationId], references: [id])
}

model Communication {
  id                    String            @id @default(uuid())
  subject               String
  description           String
  type                  CommunicationType
  enquiryRelated        String?           // Link to enquiry for tracking
  nextCommunicationDate DateTime?
  proposedNextAction    String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  customerId            String
  contactId             String?
  employeeId            String?
  contact               Contact?          @relation(fields: [contactId], references: [id])
  customer              Customer          @relation(fields: [customerId], references: [id])
  employee              Employee?         @relation(fields: [employeeId], references: [id])
}

model Document {
  id          String       @id @default(uuid())
  fileName    String
  fileUrl     String
  type        DocumentType
  createdAt   DateTime     @default(now())
  enquiryId   Int?
  quotationId String?
  enquiry     Enquiry?     @relation(fields: [enquiryId], references: [id])
  quotation   Quotation?   @relation(fields: [quotationId], references: [id])
}

enum Role {
  MARKETING
  MANAGER
  ADMINISTRATOR
}

enum LocationType {
  OFFICE
  PLANT
}

enum EnquiryStatus {
  NEW
  IN_PROGRESS
  QUOTED
  CLOSED
}

enum QuotationStatus {
  DRAFT
  LIVE
  SUBMITTED
  WON
  LOST
  RECEIVED
}

enum LostReason {
  PRICE
  DELIVERY_SCHEDULE
  LACK_OF_CONFIDENCE
  OTHER
}

enum CommunicationType {
  TELEPHONIC
  VIRTUAL_MEETING
  EMAIL
  PLANT_VISIT
  OFFICE_VISIT
}

enum DocumentType {
  CUSTOMER_REQUIREMENT
  TECHNICAL_DRAWING
  PURCHASE_ORDER
}
